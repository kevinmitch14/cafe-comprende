// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Cafe {
  place_id    String   @id @unique
  // id            Int      @id @default(autoincrement())
  reviews     Review[]
  latitude    Decimal
  longitude   Decimal
  name        String
  // rating        Int
  updatedAt   DateTime @updatedAt
  bookmarkers User[]
  // User      User?    @relation(fields: [userId], references: [email])
  // userId    String?
}

model Review {
  id       Int    @id @default(autoincrement())
  cafe     Cafe   @relation(fields: [place_id], references: [place_id])
  account  User   @relation(fields: [email], references: [email])
  // Account   Account @relation(fields: [accountId], references: [id])
  email    String
  place_id String
  rating   Int

  @@index([email])
  @@index([place_id])
}

// model Account {
//   id        Int      @id @default(autoincrement())
//   username  String
//   reviews   Review[]
//   bookmarks Cafe[]
// }

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
  bookmarks     Cafe[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
